
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programSimulate address arroba budget capacity ccur clients colon comma company cpar demands depot div dot else end equal false fi func id if import in isvoid larrow less lesseq let loop map miles minus name new not nox num ocur opar people plus pool semi star stops stops_list string then true type vehicle_type whileprogram :  type num map_block stops_block vehicle_type_block clients_block company_block demands_block\n                | map_block stops_block vehicle_type_block clients_block company_block demands_blockepsilon :map_block : map ocur import string ccurstops_block : stops ocur stop_declarations ccurstop_declarations : stop_declaration stop_declarations\n                         | epsilonstop_declaration : id opar address colon string comma people colon num cparvehicle_type_block : vehicle_type ocur vehicle_type_declarations ccurvehicle_type_declarations : vehicle_type_declaration\n                                  | vehicle_type_declaration vehicle_type_declarationsvehicle_type_declaration : id opar miles colon num comma capacity colon num cparclients_block : clients ocur client_declarations ccurclient_declarations : client_declaration\n                            | client_declaration client_declarationsclient_declaration : id opar name colon string comma stops_list colon opar stops_id cpar comma depot colon id cparstops_id : stops_id comma id\n                    | idcompany_block : company ocur budget colon num depot opar address colon string cpar company_declarations ccurcompany_declarations : id id colon num\n                                     | id id colon num company_declarationsdemands_block : demands ocur feature_list ccurfeature_list : epsilon\n                        | multiexpr feature_list\n                        | def_func feature_listfeature_list : error feature_listdef_func : func id opar formals cpar colon type ocur multiexpr ccurdef_func : func error opar formals cpar colon type ocur multiexpr ccur\n                    | func id opar error cpar colon type ocur multiexpr ccur\n                    | func id opar formals cpar colon error ocur multiexpr ccur\n                    | func id opar formals cpar colon type ocur error ccurformals  : param_list\n                    | param_list_empty\n        param_list : param\n                      | param comma param_listparam_list : error comma param_listparam_list_empty : epsilonparam : id colon typelet_list : let_assign\n                    | let_assign comma let_listlet_list : error let_list\n                    | errorlet_assign : param larrow expr\n                      | parammultiexpr : multiexpr expr\n              | expr\n              | epsilonexpr : id larrow expr\n                 | compcomp : comp less op\n                | comp lesseq op\n                | comp equal op\n                | opcomp : comp less error\n                | comp lesseq error\n                | comp equal errorop : op plus term\n              | op minus term\n              | termop : op plus error\n              | op minus errorterm : term star base_call\n                | term div base_call\n                | base_callterm : term star error\n                | term div errorbase_call : factor arroba type dot func_call\n                     | factorbase_call : error arroba type dot func_call\n                     | factor arroba error dot func_call\n        factor : atom\n                  | opar expr cparfactor : factor dot func_call\n                  | not expr\n                  | func_callfactor : isvoid base_call\n                  | nox base_call\n        factor : let let_list in ocur expr ccurfactor : let error in expr\n                | let let_list in error\n                | let let_list error exprfactor : if expr then expr else expr fifactor : if error then expr else expr fi\n                | if expr then error else expr fi\n                | if expr then expr else error fi\n                | if expr error expr else expr fi\n                | if expr then expr error expr fi\n                | if expr then expr else expr errorfactor : while expr ocur multiexpr ccurfactor : while error ocur multiexpr ccur\n                | while expr ocur error ccur\n                | while expr ocur multiexpr error\n                | while expr error multiexpr ccuratom : numatom : idatom : new typeatom : true\n                | falseatom : stringfunc_call : id opar args cparfunc_call : id opar error cpar\n                     | error opar args cparargs : arg_list\n                | arg_list_empty\n        arg_list : expr  \n                    | expr comma arg_listarg_list : error arg_listarg_list_empty : epsilon'
    
_lr_action_items = {'type':([0,77,90,105,166,238,239,242,],[2,120,125,154,199,254,256,257,]),'map':([0,5,],[4,4,]),'$end':([1,35,53,85,],[0,-2,-1,-22,]),'num':([2,46,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,78,79,80,81,83,87,91,94,95,98,99,100,101,102,103,104,107,108,109,110,120,126,134,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,160,162,165,167,168,169,170,171,172,179,180,189,190,193,194,195,196,204,206,207,208,212,213,220,221,223,224,225,226,227,228,229,230,231,232,233,236,243,258,259,260,261,262,263,264,268,269,270,271,275,277,278,279,284,285,286,287,288,293,],[5,76,-47,76,76,76,-46,-95,76,-49,-53,-59,-64,-68,-75,-71,76,76,76,76,76,-94,-97,-98,-99,121,123,-45,76,76,76,76,76,76,76,76,76,76,-74,-76,-95,-77,-96,76,-48,76,-72,76,-50,-54,-51,-55,-52,-56,-57,-60,-58,-61,-62,-65,-63,-66,-73,76,76,76,76,76,76,76,76,76,-102,76,-100,-101,76,-80,-81,-79,76,-47,76,76,237,-69,-67,-70,76,76,76,76,76,-45,-89,-92,-91,-93,-90,252,-78,-82,-88,-85,-87,-84,-86,-83,76,76,76,76,76,76,76,76,-27,-31,-30,-29,-28,295,]),'stops':([3,9,33,],[7,7,-4,]),'ocur':([4,7,11,16,25,36,61,63,64,65,66,67,68,69,76,78,79,80,107,108,109,110,118,119,120,134,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,159,179,189,190,194,195,196,213,220,221,229,230,231,232,233,243,254,255,256,257,258,259,260,261,262,263,264,],[8,12,17,26,37,46,-95,-49,-53,-59,-64,-68,-75,-71,-94,-97,-98,-99,-74,-76,-95,-77,170,172,-96,-48,-72,-50,-54,-51,-55,-52,-56,-57,-60,-58,-61,-62,-65,-63,-66,-73,193,-102,-100,-101,-80,-81,-79,-69,-67,-70,-89,-92,-91,-93,-90,-78,268,269,270,271,-82,-88,-85,-87,-84,-86,-83,]),'vehicle_type':([6,14,30,],[11,11,-5,]),'import':([8,],[13,]),'clients':([10,23,41,],[16,16,-9,]),'id':([12,17,19,26,28,39,46,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,87,91,94,95,98,99,100,101,102,103,104,106,107,108,109,110,112,120,126,132,133,134,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,160,161,162,164,165,167,168,169,170,171,172,177,179,180,189,190,191,192,193,194,195,196,204,206,207,208,213,217,218,220,221,223,224,225,226,227,228,229,230,231,232,233,243,253,258,259,260,261,262,263,264,266,267,268,269,270,271,272,275,277,278,279,281,282,284,285,286,287,288,295,296,299,],[21,29,21,40,29,40,61,-47,61,61,61,-46,92,-95,61,-49,-53,-59,-64,-68,-75,-71,61,109,109,115,61,61,-94,-97,-98,-99,-45,61,61,61,109,109,109,109,109,109,109,157,-74,-76,-95,-77,115,-96,61,115,115,-48,61,-72,61,-50,-54,-51,-55,-52,-56,-57,-60,-58,-61,-62,-65,-63,-66,-73,61,115,61,115,61,61,61,61,61,61,61,157,-102,61,-100,-101,157,157,61,-80,-81,-79,61,-47,61,61,-69,115,115,-67,-70,61,61,61,61,61,-45,-89,-92,-91,-93,-90,-78,-8,-82,-88,-85,-87,-84,-86,-83,273,-12,61,61,61,61,281,61,61,61,61,290,291,-27,-31,-30,-29,-28,281,298,-16,]),'ccur':([12,18,19,20,22,27,28,31,38,39,42,46,49,54,55,56,57,58,59,61,63,64,65,66,67,68,69,76,78,79,80,86,87,88,89,107,108,109,110,120,134,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,170,171,172,179,189,190,194,195,196,204,205,206,207,208,213,220,221,222,228,229,230,231,232,233,243,253,258,259,260,261,262,263,264,267,268,269,270,271,275,276,277,278,279,280,284,285,286,287,288,295,297,299,],[-3,30,-3,-7,33,41,-10,-6,48,-14,-11,-3,-15,85,-23,-3,-3,-3,-46,-95,-49,-53,-59,-64,-68,-75,-71,-94,-97,-98,-99,-24,-45,-25,-26,-74,-76,-95,-77,-96,-48,-72,-50,-54,-51,-55,-52,-56,-57,-60,-58,-61,-62,-65,-63,-66,-73,-3,-3,-3,-102,-100,-101,-80,-81,-79,229,231,-47,232,233,-69,-67,-70,243,-45,-89,-92,-91,-93,-90,-78,-8,-82,-88,-85,-87,-84,-86,-83,-12,-3,-3,-3,-3,284,285,286,287,288,289,-27,-31,-30,-29,-28,-20,-21,-16,]),'string':([13,46,52,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,78,79,80,87,91,94,95,98,99,100,101,102,103,104,107,108,109,110,120,122,126,134,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,160,162,165,167,168,169,170,171,172,179,180,189,190,193,194,195,196,204,206,207,208,213,220,221,223,224,225,226,227,228,229,230,231,232,233,243,250,258,259,260,261,262,263,264,268,269,270,271,275,277,278,279,284,285,286,287,288,],[22,80,84,-47,80,80,80,-46,-95,80,-49,-53,-59,-64,-68,-75,-71,80,80,80,80,80,-94,-97,-98,-99,-45,80,80,80,80,80,80,80,80,80,80,-74,-76,-95,-77,-96,174,80,-48,80,-72,80,-50,-54,-51,-55,-52,-56,-57,-60,-58,-61,-62,-65,-63,-66,-73,80,80,80,80,80,80,80,80,80,-102,80,-100,-101,80,-80,-81,-79,80,-47,80,80,-69,-67,-70,80,80,80,80,80,-45,-89,-92,-91,-93,-90,-78,265,-82,-88,-85,-87,-84,-86,-83,80,80,80,80,80,80,80,80,-27,-31,-30,-29,-28,]),'company':([15,34,48,],[25,25,-13,]),'opar':([21,29,40,46,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,78,79,80,87,91,92,93,94,95,97,98,99,100,101,102,103,104,107,108,109,110,117,119,120,126,134,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,157,158,160,162,165,167,168,169,170,171,172,173,179,180,189,190,193,194,195,196,201,204,205,206,207,208,213,220,221,223,224,225,226,227,228,229,230,231,232,233,243,245,251,258,259,260,261,262,263,264,268,269,270,271,275,276,277,278,279,284,285,286,287,288,],[32,43,50,62,-47,62,62,91,-46,95,62,-49,-53,-59,-64,-68,-75,-71,62,62,62,62,62,-94,-97,-98,-99,-45,62,132,133,62,62,139,62,62,62,62,62,62,62,-74,-76,95,-77,139,139,-96,91,-48,91,-72,62,-50,139,-51,139,-52,139,-57,139,-58,139,-62,139,-63,139,-73,95,139,62,62,62,62,62,62,62,62,62,209,-102,62,-100,-101,62,-80,-81,-79,139,62,139,-47,62,62,-69,-67,-70,62,62,62,62,62,-45,-89,139,-91,-93,-90,-78,139,266,-82,-88,-85,-87,-84,-86,-83,62,62,62,62,62,139,62,62,62,-27,-31,-30,-29,-28,]),'demands':([24,45,289,],[36,36,-19,]),'address':([32,209,],[44,234,]),'budget':([37,],[47,]),'miles':([43,],[51,]),'colon':([44,47,51,82,115,176,211,215,216,219,234,235,290,294,],[52,81,83,122,166,212,236,238,239,242,250,251,293,296,]),'error':([46,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,87,91,94,95,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,118,120,126,132,133,134,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,159,160,161,162,163,164,165,167,168,169,170,171,172,177,179,180,189,190,191,192,193,194,195,196,197,198,199,200,204,206,207,208,213,217,218,220,221,223,224,225,226,227,228,229,230,231,232,233,238,243,244,258,259,260,261,262,263,264,268,269,270,271,275,277,278,279,284,285,286,287,288,],[58,-47,58,58,58,-46,93,-95,97,-49,-53,-59,-64,-68,-75,-71,97,97,97,112,117,119,-94,-97,-98,-99,-45,126,97,136,141,143,145,147,149,151,153,155,158,-74,-76,-95,-77,160,161,-39,-44,168,171,-96,126,182,187,-48,126,-72,126,-50,-54,-51,-55,-52,-56,-57,-60,-58,-61,-62,-65,-63,-66,-73,194,97,161,97,-41,161,97,201,97,97,205,97,97,158,-102,126,-100,-101,158,158,97,-80,-81,-79,-40,-43,-38,224,230,-47,97,97,-69,187,187,-67,-70,245,97,97,97,97,-45,-89,-92,-91,-93,-90,255,-78,259,-82,-88,-85,-87,-84,-86,-83,276,97,97,97,97,97,97,97,-27,-31,-30,-29,-28,]),'func':([46,55,56,57,58,59,61,63,64,65,66,67,68,69,76,78,79,80,87,107,108,109,110,120,134,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,179,189,190,194,195,196,213,220,221,229,230,231,232,233,243,258,259,260,261,262,263,264,284,285,286,287,288,],[60,-47,60,60,60,-46,-95,-49,-53,-59,-64,-68,-75,-71,-94,-97,-98,-99,-45,-74,-76,-95,-77,-96,-48,-72,-50,-54,-51,-55,-52,-56,-57,-60,-58,-61,-62,-65,-63,-66,-73,-102,-100,-101,-80,-81,-79,-69,-67,-70,-89,-92,-91,-93,-90,-78,-82,-88,-85,-87,-84,-86,-83,-27,-31,-30,-29,-28,]),'not':([46,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,78,79,80,87,91,94,95,98,99,100,101,102,103,104,107,108,109,110,120,126,134,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,160,162,165,167,168,169,170,171,172,179,180,189,190,193,194,195,196,204,206,207,208,213,220,221,223,224,225,226,227,228,229,230,231,232,233,243,258,259,260,261,262,263,264,268,269,270,271,275,277,278,279,284,285,286,287,288,],[70,-47,70,70,70,-46,-95,70,-49,-53,-59,-64,-68,-75,-71,70,70,70,70,70,-94,-97,-98,-99,-45,70,70,70,70,70,70,70,70,70,70,-74,-76,-95,-77,-96,70,-48,70,-72,70,-50,-54,-51,-55,-52,-56,-57,-60,-58,-61,-62,-65,-63,-66,-73,70,70,70,70,70,70,70,70,70,-102,70,-100,-101,70,-80,-81,-79,70,-47,70,70,-69,-67,-70,70,70,70,70,70,-45,-89,-92,-91,-93,-90,-78,-82,-88,-85,-87,-84,-86,-83,70,70,70,70,70,70,70,70,-27,-31,-30,-29,-28,]),'isvoid':([46,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,78,79,80,87,91,94,95,98,99,100,101,102,103,104,107,108,109,110,120,126,134,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,160,162,165,167,168,169,170,171,172,179,180,189,190,193,194,195,196,204,206,207,208,213,220,221,223,224,225,226,227,228,229,230,231,232,233,243,258,259,260,261,262,263,264,268,269,270,271,275,277,278,279,284,285,286,287,288,],[71,-47,71,71,71,-46,-95,71,-49,-53,-59,-64,-68,-75,-71,71,71,71,71,71,-94,-97,-98,-99,-45,71,71,71,71,71,71,71,71,71,71,-74,-76,-95,-77,-96,71,-48,71,-72,71,-50,-54,-51,-55,-52,-56,-57,-60,-58,-61,-62,-65,-63,-66,-73,71,71,71,71,71,71,71,71,71,-102,71,-100,-101,71,-80,-81,-79,71,-47,71,71,-69,-67,-70,71,71,71,71,71,-45,-89,-92,-91,-93,-90,-78,-82,-88,-85,-87,-84,-86,-83,71,71,71,71,71,71,71,71,-27,-31,-30,-29,-28,]),'nox':([46,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,78,79,80,87,91,94,95,98,99,100,101,102,103,104,107,108,109,110,120,126,134,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,160,162,165,167,168,169,170,171,172,179,180,189,190,193,194,195,196,204,206,207,208,213,220,221,223,224,225,226,227,228,229,230,231,232,233,243,258,259,260,261,262,263,264,268,269,270,271,275,277,278,279,284,285,286,287,288,],[72,-47,72,72,72,-46,-95,72,-49,-53,-59,-64,-68,-75,-71,72,72,72,72,72,-94,-97,-98,-99,-45,72,72,72,72,72,72,72,72,72,72,-74,-76,-95,-77,-96,72,-48,72,-72,72,-50,-54,-51,-55,-52,-56,-57,-60,-58,-61,-62,-65,-63,-66,-73,72,72,72,72,72,72,72,72,72,-102,72,-100,-101,72,-80,-81,-79,72,-47,72,72,-69,-67,-70,72,72,72,72,72,-45,-89,-92,-91,-93,-90,-78,-82,-88,-85,-87,-84,-86,-83,72,72,72,72,72,72,72,72,-27,-31,-30,-29,-28,]),'let':([46,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,78,79,80,87,91,94,95,98,99,100,101,102,103,104,107,108,109,110,120,126,134,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,160,162,165,167,168,169,170,171,172,179,180,189,190,193,194,195,196,204,206,207,208,213,220,221,223,224,225,226,227,228,229,230,231,232,233,243,258,259,260,261,262,263,264,268,269,270,271,275,277,278,279,284,285,286,287,288,],[73,-47,73,73,73,-46,-95,73,-49,-53,-59,-64,-68,-75,-71,73,73,73,73,73,-94,-97,-98,-99,-45,73,73,73,73,73,73,73,73,73,73,-74,-76,-95,-77,-96,73,-48,73,-72,73,-50,-54,-51,-55,-52,-56,-57,-60,-58,-61,-62,-65,-63,-66,-73,73,73,73,73,73,73,73,73,73,-102,73,-100,-101,73,-80,-81,-79,73,-47,73,73,-69,-67,-70,73,73,73,73,73,-45,-89,-92,-91,-93,-90,-78,-82,-88,-85,-87,-84,-86,-83,73,73,73,73,73,73,73,73,-27,-31,-30,-29,-28,]),'if':([46,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,78,79,80,87,91,94,95,98,99,100,101,102,103,104,107,108,109,110,120,126,134,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,160,162,165,167,168,169,170,171,172,179,180,189,190,193,194,195,196,204,206,207,208,213,220,221,223,224,225,226,227,228,229,230,231,232,233,243,258,259,260,261,262,263,264,268,269,270,271,275,277,278,279,284,285,286,287,288,],[74,-47,74,74,74,-46,-95,74,-49,-53,-59,-64,-68,-75,-71,74,74,74,74,74,-94,-97,-98,-99,-45,74,74,74,74,74,74,74,74,74,74,-74,-76,-95,-77,-96,74,-48,74,-72,74,-50,-54,-51,-55,-52,-56,-57,-60,-58,-61,-62,-65,-63,-66,-73,74,74,74,74,74,74,74,74,74,-102,74,-100,-101,74,-80,-81,-79,74,-47,74,74,-69,-67,-70,74,74,74,74,74,-45,-89,-92,-91,-93,-90,-78,-82,-88,-85,-87,-84,-86,-83,74,74,74,74,74,74,74,74,-27,-31,-30,-29,-28,]),'while':([46,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,78,79,80,87,91,94,95,98,99,100,101,102,103,104,107,108,109,110,120,126,134,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,160,162,165,167,168,169,170,171,172,179,180,189,190,193,194,195,196,204,206,207,208,213,220,221,223,224,225,226,227,228,229,230,231,232,233,243,258,259,260,261,262,263,264,268,269,270,271,275,277,278,279,284,285,286,287,288,],[75,-47,75,75,75,-46,-95,75,-49,-53,-59,-64,-68,-75,-71,75,75,75,75,75,-94,-97,-98,-99,-45,75,75,75,75,75,75,75,75,75,75,-74,-76,-95,-77,-96,75,-48,75,-72,75,-50,-54,-51,-55,-52,-56,-57,-60,-58,-61,-62,-65,-63,-66,-73,75,75,75,75,75,75,75,75,75,-102,75,-100,-101,75,-80,-81,-79,75,-47,75,75,-69,-67,-70,75,75,75,75,75,-45,-89,-92,-91,-93,-90,-78,-82,-88,-85,-87,-84,-86,-83,75,75,75,75,75,75,75,75,-27,-31,-30,-29,-28,]),'new':([46,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,78,79,80,87,91,94,95,98,99,100,101,102,103,104,107,108,109,110,120,126,134,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,160,162,165,167,168,169,170,171,172,179,180,189,190,193,194,195,196,204,206,207,208,213,220,221,223,224,225,226,227,228,229,230,231,232,233,243,258,259,260,261,262,263,264,268,269,270,271,275,277,278,279,284,285,286,287,288,],[77,-47,77,77,77,-46,-95,77,-49,-53,-59,-64,-68,-75,-71,77,77,77,77,77,-94,-97,-98,-99,-45,77,77,77,77,77,77,77,77,77,77,-74,-76,-95,-77,-96,77,-48,77,-72,77,-50,-54,-51,-55,-52,-56,-57,-60,-58,-61,-62,-65,-63,-66,-73,77,77,77,77,77,77,77,77,77,-102,77,-100,-101,77,-80,-81,-79,77,-47,77,77,-69,-67,-70,77,77,77,77,77,-45,-89,-92,-91,-93,-90,-78,-82,-88,-85,-87,-84,-86,-83,77,77,77,77,77,77,77,77,-27,-31,-30,-29,-28,]),'true':([46,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,78,79,80,87,91,94,95,98,99,100,101,102,103,104,107,108,109,110,120,126,134,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,160,162,165,167,168,169,170,171,172,179,180,189,190,193,194,195,196,204,206,207,208,213,220,221,223,224,225,226,227,228,229,230,231,232,233,243,258,259,260,261,262,263,264,268,269,270,271,275,277,278,279,284,285,286,287,288,],[78,-47,78,78,78,-46,-95,78,-49,-53,-59,-64,-68,-75,-71,78,78,78,78,78,-94,-97,-98,-99,-45,78,78,78,78,78,78,78,78,78,78,-74,-76,-95,-77,-96,78,-48,78,-72,78,-50,-54,-51,-55,-52,-56,-57,-60,-58,-61,-62,-65,-63,-66,-73,78,78,78,78,78,78,78,78,78,-102,78,-100,-101,78,-80,-81,-79,78,-47,78,78,-69,-67,-70,78,78,78,78,78,-45,-89,-92,-91,-93,-90,-78,-82,-88,-85,-87,-84,-86,-83,78,78,78,78,78,78,78,78,-27,-31,-30,-29,-28,]),'false':([46,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,78,79,80,87,91,94,95,98,99,100,101,102,103,104,107,108,109,110,120,126,134,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,160,162,165,167,168,169,170,171,172,179,180,189,190,193,194,195,196,204,206,207,208,213,220,221,223,224,225,226,227,228,229,230,231,232,233,243,258,259,260,261,262,263,264,268,269,270,271,275,277,278,279,284,285,286,287,288,],[79,-47,79,79,79,-46,-95,79,-49,-53,-59,-64,-68,-75,-71,79,79,79,79,79,-94,-97,-98,-99,-45,79,79,79,79,79,79,79,79,79,79,-74,-76,-95,-77,-96,79,-48,79,-72,79,-50,-54,-51,-55,-52,-56,-57,-60,-58,-61,-62,-65,-63,-66,-73,79,79,79,79,79,79,79,79,79,-102,79,-100,-101,79,-80,-81,-79,79,-47,79,79,-69,-67,-70,79,79,79,79,79,-45,-89,-92,-91,-93,-90,-78,-82,-88,-85,-87,-84,-86,-83,79,79,79,79,79,79,79,79,-27,-31,-30,-29,-28,]),'name':([50,],[82,]),'arroba':([58,61,63,64,65,66,67,68,69,76,78,79,80,97,107,108,109,110,117,119,120,126,134,136,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,179,189,190,194,195,196,201,205,213,220,221,229,230,231,232,233,243,245,258,259,260,261,262,263,264,276,],[90,-95,-49,-53,-59,-64,105,-75,-71,-94,-97,-98,-99,90,-74,-76,-95,-77,90,90,-96,90,-48,90,-72,-50,90,-51,90,-52,90,-57,90,-58,90,-62,90,-63,90,-73,-102,-100,-101,-80,-81,-79,90,90,-69,-67,-70,-89,90,-91,-93,-90,-78,90,-82,-88,-85,-87,-84,-86,-83,90,]),'larrow':([61,114,199,],[94,165,-38,]),'dot':([61,63,64,65,66,67,68,69,76,78,79,80,107,108,109,110,120,125,134,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,179,189,190,194,195,196,213,220,221,229,230,231,232,233,243,258,259,260,261,262,263,264,],[-95,-49,-53,-59,-64,106,-75,-71,-94,-97,-98,-99,-74,-76,-95,-77,-96,177,-48,-72,-50,-54,-51,-55,-52,-56,-57,-60,-58,-61,-62,-65,-63,-66,191,192,-73,-102,-100,-101,-80,-81,-79,-69,-67,-70,-89,-92,-91,-93,-90,-78,-82,-88,-85,-87,-84,-86,-83,]),'star':([61,63,64,65,66,67,68,69,76,78,79,80,107,108,109,110,120,134,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,179,189,190,194,195,196,213,220,221,229,230,231,232,233,243,258,259,260,261,262,263,264,],[-95,-49,-53,103,-64,-68,-75,-71,-94,-97,-98,-99,-74,-76,-95,-77,-96,-48,-72,-50,-54,-51,-55,-52,-56,103,-60,103,-61,-62,-65,-63,-66,-73,-102,-100,-101,-80,-81,-79,-69,-67,-70,-89,-92,-91,-93,-90,-78,-82,-88,-85,-87,-84,-86,-83,]),'div':([61,63,64,65,66,67,68,69,76,78,79,80,107,108,109,110,120,134,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,179,189,190,194,195,196,213,220,221,229,230,231,232,233,243,258,259,260,261,262,263,264,],[-95,-49,-53,104,-64,-68,-75,-71,-94,-97,-98,-99,-74,-76,-95,-77,-96,-48,-72,-50,-54,-51,-55,-52,-56,104,-60,104,-61,-62,-65,-63,-66,-73,-102,-100,-101,-80,-81,-79,-69,-67,-70,-89,-92,-91,-93,-90,-78,-82,-88,-85,-87,-84,-86,-83,]),'plus':([61,63,64,65,66,67,68,69,76,78,79,80,107,108,109,110,120,134,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,179,189,190,194,195,196,213,220,221,229,230,231,232,233,243,258,259,260,261,262,263,264,],[-95,-49,101,-59,-64,-68,-75,-71,-94,-97,-98,-99,-74,-76,-95,-77,-96,-48,-72,101,-54,101,-55,101,-56,-57,-60,-58,-61,-62,-65,-63,-66,-73,-102,-100,-101,-80,-81,-79,-69,-67,-70,-89,-92,-91,-93,-90,-78,-82,-88,-85,-87,-84,-86,-83,]),'minus':([61,63,64,65,66,67,68,69,76,78,79,80,107,108,109,110,120,134,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,179,189,190,194,195,196,213,220,221,229,230,231,232,233,243,258,259,260,261,262,263,264,],[-95,-49,102,-59,-64,-68,-75,-71,-94,-97,-98,-99,-74,-76,-95,-77,-96,-48,-72,102,-54,102,-55,102,-56,-57,-60,-58,-61,-62,-65,-63,-66,-73,-102,-100,-101,-80,-81,-79,-69,-67,-70,-89,-92,-91,-93,-90,-78,-82,-88,-85,-87,-84,-86,-83,]),'less':([61,63,64,65,66,67,68,69,76,78,79,80,107,108,109,110,120,134,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,179,189,190,194,195,196,213,220,221,229,230,231,232,233,243,258,259,260,261,262,263,264,],[-95,98,-53,-59,-64,-68,-75,-71,-94,-97,-98,-99,-74,-76,-95,-77,-96,-48,-72,-50,-54,-51,-55,-52,-56,-57,-60,-58,-61,-62,-65,-63,-66,-73,-102,-100,-101,-80,-81,-79,-69,-67,-70,-89,-92,-91,-93,-90,-78,-82,-88,-85,-87,-84,-86,-83,]),'lesseq':([61,63,64,65,66,67,68,69,76,78,79,80,107,108,109,110,120,134,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,179,189,190,194,195,196,213,220,221,229,230,231,232,233,243,258,259,260,261,262,263,264,],[-95,99,-53,-59,-64,-68,-75,-71,-94,-97,-98,-99,-74,-76,-95,-77,-96,-48,-72,-50,-54,-51,-55,-52,-56,-57,-60,-58,-61,-62,-65,-63,-66,-73,-102,-100,-101,-80,-81,-79,-69,-67,-70,-89,-92,-91,-93,-90,-78,-82,-88,-85,-87,-84,-86,-83,]),'equal':([61,63,64,65,66,67,68,69,76,78,79,80,107,108,109,110,120,134,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,179,189,190,194,195,196,213,220,221,229,230,231,232,233,243,258,259,260,261,262,263,264,],[-95,100,-53,-59,-64,-68,-75,-71,-94,-97,-98,-99,-74,-76,-95,-77,-96,-48,-72,-50,-54,-51,-55,-52,-56,-57,-60,-58,-61,-62,-65,-63,-66,-73,-102,-100,-101,-80,-81,-79,-69,-67,-70,-89,-92,-91,-93,-90,-78,-82,-88,-85,-87,-84,-86,-83,]),'cpar':([61,63,64,65,66,67,68,69,76,78,79,80,91,95,96,107,108,109,110,120,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,178,179,181,182,183,184,185,186,188,189,190,194,195,196,199,213,214,220,221,229,230,231,232,233,237,240,241,243,252,258,259,260,261,262,263,264,265,273,274,291,298,],[-95,-49,-53,-59,-64,-68,-75,-71,-94,-97,-98,-99,-3,-3,138,-74,-76,-95,-77,-96,179,138,-103,-104,-108,-3,-3,-48,189,190,-105,-72,-3,-50,-54,-51,-55,-52,-56,-57,-60,-58,-61,-62,-65,-63,-66,-73,-107,-102,215,216,-32,-33,-34,-37,219,-100,-101,-80,-81,-79,-38,-69,-106,-67,-70,-89,-92,-91,-93,-90,253,-36,-35,-78,267,-82,-88,-85,-87,-84,-86,-83,272,-18,283,-17,299,]),'then':([61,63,64,65,66,67,68,69,76,78,79,80,107,108,109,110,116,117,120,134,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,179,189,190,194,195,196,213,220,221,229,230,231,232,233,243,258,259,260,261,262,263,264,],[-95,-49,-53,-59,-64,-68,-75,-71,-94,-97,-98,-99,-74,-76,-95,-77,167,169,-96,-48,-72,-50,-54,-51,-55,-52,-56,-57,-60,-58,-61,-62,-65,-63,-66,-73,-102,-100,-101,-80,-81,-79,-69,-67,-70,-89,-92,-91,-93,-90,-78,-82,-88,-85,-87,-84,-86,-83,]),'comma':([61,63,64,65,66,67,68,69,76,78,79,80,84,107,108,109,110,113,114,120,123,128,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,174,179,182,185,187,189,190,194,195,196,198,199,213,220,221,229,230,231,232,233,243,258,259,260,261,262,263,264,273,274,283,291,],[-95,-49,-53,-59,-64,-68,-75,-71,-94,-97,-98,-99,124,-74,-76,-95,-77,164,-44,-96,175,180,-48,180,-72,-50,-54,-51,-55,-52,-56,-57,-60,-58,-61,-62,-65,-63,-66,-73,210,-102,217,218,217,-100,-101,-80,-81,-79,-43,-38,-69,-67,-70,-89,-92,-91,-93,-90,-78,-82,-88,-85,-87,-84,-86,-83,-18,282,292,-17,]),'in':([61,63,64,65,66,67,68,69,76,78,79,80,107,108,109,110,111,112,113,114,120,134,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,161,163,179,189,190,194,195,196,197,198,199,213,220,221,229,230,231,232,233,243,258,259,260,261,262,263,264,],[-95,-49,-53,-59,-64,-68,-75,-71,-94,-97,-98,-99,-74,-76,-95,-77,159,162,-39,-44,-96,-48,-72,-50,-54,-51,-55,-52,-56,-57,-60,-58,-61,-62,-65,-63,-66,-73,-42,-41,-102,-100,-101,-80,-81,-79,-40,-43,-38,-69,-67,-70,-89,-92,-91,-93,-90,-78,-82,-88,-85,-87,-84,-86,-83,]),'else':([61,63,64,65,66,67,68,69,76,78,79,80,107,108,109,110,120,134,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,179,189,190,194,195,196,200,201,202,203,213,220,221,229,230,231,232,233,243,258,259,260,261,262,263,264,],[-95,-49,-53,-59,-64,-68,-75,-71,-94,-97,-98,-99,-74,-76,-95,-77,-96,-48,-72,-50,-54,-51,-55,-52,-56,-57,-60,-58,-61,-62,-65,-63,-66,-73,-102,-100,-101,-80,-81,-79,223,225,226,227,-69,-67,-70,-89,-92,-91,-93,-90,-78,-82,-88,-85,-87,-84,-86,-83,]),'fi':([61,63,64,65,66,67,68,69,76,78,79,80,107,108,109,110,120,134,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,179,189,190,194,195,196,213,220,221,229,230,231,232,233,243,244,245,246,247,248,249,258,259,260,261,262,263,264,],[-95,-49,-53,-59,-64,-68,-75,-71,-94,-97,-98,-99,-74,-76,-95,-77,-96,-48,-72,-50,-54,-51,-55,-52,-56,-57,-60,-58,-61,-62,-65,-63,-66,-73,-102,-100,-101,-80,-81,-79,-69,-67,-70,-89,-92,-91,-93,-90,-78,258,260,261,262,263,264,-82,-88,-85,-87,-84,-86,-83,]),'depot':([121,292,],[173,294,]),'people':([124,],[176,]),'capacity':([175,],[211,]),'stops_list':([210,],[235,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'map_block':([0,5,],[3,9,]),'stops_block':([3,9,],[6,14,]),'vehicle_type_block':([6,14,],[10,23,]),'clients_block':([10,23,],[15,34,]),'stop_declarations':([12,19,],[18,31,]),'stop_declaration':([12,19,],[19,19,]),'epsilon':([12,19,46,56,57,58,91,95,132,133,139,170,171,172,268,269,270,271,],[20,20,55,55,55,55,131,131,186,186,131,206,206,206,206,206,206,206,]),'company_block':([15,34,],[24,45,]),'vehicle_type_declarations':([17,28,],[27,42,]),'vehicle_type_declaration':([17,28,],[28,28,]),'demands_block':([24,45,],[35,53,]),'client_declarations':([26,39,],[38,49,]),'client_declaration':([26,39,],[39,39,]),'feature_list':([46,56,57,58,],[54,86,88,89,]),'multiexpr':([46,56,57,58,170,171,172,268,269,270,271,],[56,56,56,56,204,207,208,275,277,278,279,]),'def_func':([46,56,57,58,],[57,57,57,57,]),'expr':([46,56,57,58,62,70,74,75,91,94,95,126,136,139,160,162,165,167,168,169,170,171,172,180,193,204,207,208,223,224,225,226,227,268,269,270,271,275,277,278,279,],[59,87,59,59,96,107,116,118,128,134,137,137,137,137,195,196,198,200,202,203,59,59,59,137,222,228,228,228,244,246,247,248,249,59,59,59,59,228,228,228,228,]),'comp':([46,56,57,58,62,70,74,75,91,94,95,126,136,139,160,162,165,167,168,169,170,171,172,180,193,204,207,208,223,224,225,226,227,268,269,270,271,275,277,278,279,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'op':([46,56,57,58,62,70,74,75,91,94,95,98,99,100,126,136,139,160,162,165,167,168,169,170,171,172,180,193,204,207,208,223,224,225,226,227,268,269,270,271,275,277,278,279,],[64,64,64,64,64,64,64,64,64,64,64,140,142,144,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'term':([46,56,57,58,62,70,74,75,91,94,95,98,99,100,101,102,126,136,139,160,162,165,167,168,169,170,171,172,180,193,204,207,208,223,224,225,226,227,268,269,270,271,275,277,278,279,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,146,148,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'base_call':([46,56,57,58,62,70,71,72,74,75,91,94,95,98,99,100,101,102,103,104,126,136,139,160,162,165,167,168,169,170,171,172,180,193,204,207,208,223,224,225,226,227,268,269,270,271,275,277,278,279,],[66,66,66,66,66,66,108,110,66,66,66,66,66,66,66,66,66,66,150,152,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'factor':([46,56,57,58,62,70,71,72,74,75,91,94,95,98,99,100,101,102,103,104,126,136,139,160,162,165,167,168,169,170,171,172,180,193,204,207,208,223,224,225,226,227,268,269,270,271,275,277,278,279,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'func_call':([46,56,57,58,62,70,71,72,74,75,91,94,95,98,99,100,101,102,103,104,106,126,136,139,160,162,165,167,168,169,170,171,172,177,180,191,192,193,204,207,208,223,224,225,226,227,268,269,270,271,275,277,278,279,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,156,68,68,68,68,68,68,68,68,68,68,68,68,213,68,220,221,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'atom':([46,56,57,58,62,70,71,72,74,75,91,94,95,98,99,100,101,102,103,104,126,136,139,160,162,165,167,168,169,170,171,172,180,193,204,207,208,223,224,225,226,227,268,269,270,271,275,277,278,279,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'let_list':([73,112,161,164,],[111,163,163,197,]),'let_assign':([73,112,161,164,],[113,113,113,113,]),'param':([73,112,132,133,161,164,217,218,],[114,114,185,185,114,114,185,185,]),'args':([91,95,139,],[127,135,127,]),'arg_list':([91,95,126,136,139,180,],[129,129,178,178,129,214,]),'arg_list_empty':([91,95,139,],[130,130,130,]),'formals':([132,133,],[181,188,]),'param_list':([132,133,217,218,],[183,183,240,241,]),'param_list_empty':([132,133,],[184,184,]),'stops_id':([266,],[274,]),'company_declarations':([272,295,],[280,297,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> type num map_block stops_block vehicle_type_block clients_block company_block demands_block','program',8,'p_program','my_parser.py',35),
  ('program -> map_block stops_block vehicle_type_block clients_block company_block demands_block','program',6,'p_program','my_parser.py',36),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','my_parser.py',44),
  ('map_block -> map ocur import string ccur','map_block',5,'p_map_block','my_parser.py',48),
  ('stops_block -> stops ocur stop_declarations ccur','stops_block',4,'p_stops_block','my_parser.py',52),
  ('stop_declarations -> stop_declaration stop_declarations','stop_declarations',2,'p_stop_declarations','my_parser.py',56),
  ('stop_declarations -> epsilon','stop_declarations',1,'p_stop_declarations','my_parser.py',57),
  ('stop_declaration -> id opar address colon string comma people colon num cpar','stop_declaration',10,'p_stop_declaration','my_parser.py',64),
  ('vehicle_type_block -> vehicle_type ocur vehicle_type_declarations ccur','vehicle_type_block',4,'p_vehicle_type_block','my_parser.py',68),
  ('vehicle_type_declarations -> vehicle_type_declaration','vehicle_type_declarations',1,'p_vehicle_type_declarations','my_parser.py',72),
  ('vehicle_type_declarations -> vehicle_type_declaration vehicle_type_declarations','vehicle_type_declarations',2,'p_vehicle_type_declarations','my_parser.py',73),
  ('vehicle_type_declaration -> id opar miles colon num comma capacity colon num cpar','vehicle_type_declaration',10,'p_vehicle_type_declaration','my_parser.py',80),
  ('clients_block -> clients ocur client_declarations ccur','clients_block',4,'p_clients_block','my_parser.py',84),
  ('client_declarations -> client_declaration','client_declarations',1,'p_client_declarations','my_parser.py',88),
  ('client_declarations -> client_declaration client_declarations','client_declarations',2,'p_client_declarations','my_parser.py',89),
  ('client_declaration -> id opar name colon string comma stops_list colon opar stops_id cpar comma depot colon id cpar','client_declaration',16,'p_client_declaration','my_parser.py',96),
  ('stops_id -> stops_id comma id','stops_id',3,'p_stops_id','my_parser.py',100),
  ('stops_id -> id','stops_id',1,'p_stops_id','my_parser.py',101),
  ('company_block -> company ocur budget colon num depot opar address colon string cpar company_declarations ccur','company_block',13,'p_company_block','my_parser.py',108),
  ('company_declarations -> id id colon num','company_declarations',4,'p_company_declarations','my_parser.py',113),
  ('company_declarations -> id id colon num company_declarations','company_declarations',5,'p_company_declarations','my_parser.py',114),
  ('demands_block -> demands ocur feature_list ccur','demands_block',4,'p_demands_block','my_parser.py',122),
  ('feature_list -> epsilon','feature_list',1,'p_feature_list','my_parser.py',126),
  ('feature_list -> multiexpr feature_list','feature_list',2,'p_feature_list','my_parser.py',127),
  ('feature_list -> def_func feature_list','feature_list',2,'p_feature_list','my_parser.py',128),
  ('feature_list -> error feature_list','feature_list',2,'p_feature_list_error','my_parser.py',132),
  ('def_func -> func id opar formals cpar colon type ocur multiexpr ccur','def_func',10,'p_def_func','my_parser.py',137),
  ('def_func -> func error opar formals cpar colon type ocur multiexpr ccur','def_func',10,'p_def_func_error','my_parser.py',141),
  ('def_func -> func id opar error cpar colon type ocur multiexpr ccur','def_func',10,'p_def_func_error','my_parser.py',142),
  ('def_func -> func id opar formals cpar colon error ocur multiexpr ccur','def_func',10,'p_def_func_error','my_parser.py',143),
  ('def_func -> func id opar formals cpar colon type ocur error ccur','def_func',10,'p_def_func_error','my_parser.py',144),
  ('formals -> param_list','formals',1,'p_formals','my_parser.py',148),
  ('formals -> param_list_empty','formals',1,'p_formals','my_parser.py',149),
  ('param_list -> param','param_list',1,'p_param_list','my_parser.py',154),
  ('param_list -> param comma param_list','param_list',3,'p_param_list','my_parser.py',155),
  ('param_list -> error comma param_list','param_list',3,'p_param_list_error','my_parser.py',159),
  ('param_list_empty -> epsilon','param_list_empty',1,'p_param_list_empty','my_parser.py',163),
  ('param -> id colon type','param',3,'p_param','my_parser.py',167),
  ('let_list -> let_assign','let_list',1,'p_let_list','my_parser.py',171),
  ('let_list -> let_assign comma let_list','let_list',3,'p_let_list','my_parser.py',172),
  ('let_list -> error let_list','let_list',2,'p_let_list_error','my_parser.py',176),
  ('let_list -> error','let_list',1,'p_let_list_error','my_parser.py',177),
  ('let_assign -> param larrow expr','let_assign',3,'p_let_assign','my_parser.py',181),
  ('let_assign -> param','let_assign',1,'p_let_assign','my_parser.py',182),
  ('multiexpr -> multiexpr expr','multiexpr',2,'p_multiexpr','my_parser.py',189),
  ('multiexpr -> expr','multiexpr',1,'p_multiexpr','my_parser.py',190),
  ('multiexpr -> epsilon','multiexpr',1,'p_multiexpr','my_parser.py',191),
  ('expr -> id larrow expr','expr',3,'p_expr','my_parser.py',200),
  ('expr -> comp','expr',1,'p_expr','my_parser.py',201),
  ('comp -> comp less op','comp',3,'p_comp','my_parser.py',208),
  ('comp -> comp lesseq op','comp',3,'p_comp','my_parser.py',209),
  ('comp -> comp equal op','comp',3,'p_comp','my_parser.py',210),
  ('comp -> op','comp',1,'p_comp','my_parser.py',211),
  ('comp -> comp less error','comp',3,'p_comp_error','my_parser.py',222),
  ('comp -> comp lesseq error','comp',3,'p_comp_error','my_parser.py',223),
  ('comp -> comp equal error','comp',3,'p_comp_error','my_parser.py',224),
  ('op -> op plus term','op',3,'p_op','my_parser.py',228),
  ('op -> op minus term','op',3,'p_op','my_parser.py',229),
  ('op -> term','op',1,'p_op','my_parser.py',230),
  ('op -> op plus error','op',3,'p_op_error','my_parser.py',239),
  ('op -> op minus error','op',3,'p_op_error','my_parser.py',240),
  ('term -> term star base_call','term',3,'p_term','my_parser.py',244),
  ('term -> term div base_call','term',3,'p_term','my_parser.py',245),
  ('term -> base_call','term',1,'p_term','my_parser.py',246),
  ('term -> term star error','term',3,'p_term_error','my_parser.py',255),
  ('term -> term div error','term',3,'p_term_error','my_parser.py',256),
  ('base_call -> factor arroba type dot func_call','base_call',5,'p_base_call','my_parser.py',260),
  ('base_call -> factor','base_call',1,'p_base_call','my_parser.py',261),
  ('base_call -> error arroba type dot func_call','base_call',5,'p_base_call_error','my_parser.py',268),
  ('base_call -> factor arroba error dot func_call','base_call',5,'p_base_call_error','my_parser.py',269),
  ('factor -> atom','factor',1,'p_factor1','my_parser.py',274),
  ('factor -> opar expr cpar','factor',3,'p_factor1','my_parser.py',275),
  ('factor -> factor dot func_call','factor',3,'p_factor2','my_parser.py',279),
  ('factor -> not expr','factor',2,'p_factor2','my_parser.py',280),
  ('factor -> func_call','factor',1,'p_factor2','my_parser.py',281),
  ('factor -> isvoid base_call','factor',2,'p_factor3','my_parser.py',290),
  ('factor -> nox base_call','factor',2,'p_factor3','my_parser.py',291),
  ('factor -> let let_list in ocur expr ccur','factor',6,'p_expr_let','my_parser.py',299),
  ('factor -> let error in expr','factor',4,'p_expr_let_error','my_parser.py',303),
  ('factor -> let let_list in error','factor',4,'p_expr_let_error','my_parser.py',304),
  ('factor -> let let_list error expr','factor',4,'p_expr_let_error','my_parser.py',305),
  ('factor -> if expr then expr else expr fi','factor',7,'p_expr_if','my_parser.py',309),
  ('factor -> if error then expr else expr fi','factor',7,'p_expr_if_error','my_parser.py',313),
  ('factor -> if expr then error else expr fi','factor',7,'p_expr_if_error','my_parser.py',314),
  ('factor -> if expr then expr else error fi','factor',7,'p_expr_if_error','my_parser.py',315),
  ('factor -> if expr error expr else expr fi','factor',7,'p_expr_if_error','my_parser.py',316),
  ('factor -> if expr then expr error expr fi','factor',7,'p_expr_if_error','my_parser.py',317),
  ('factor -> if expr then expr else expr error','factor',7,'p_expr_if_error','my_parser.py',318),
  ('factor -> while expr ocur multiexpr ccur','factor',5,'p_expr_while','my_parser.py',322),
  ('factor -> while error ocur multiexpr ccur','factor',5,'p_expr_while_error','my_parser.py',326),
  ('factor -> while expr ocur error ccur','factor',5,'p_expr_while_error','my_parser.py',327),
  ('factor -> while expr ocur multiexpr error','factor',5,'p_expr_while_error','my_parser.py',328),
  ('factor -> while expr error multiexpr ccur','factor',5,'p_expr_while_error','my_parser.py',329),
  ('atom -> num','atom',1,'p_atom_num','my_parser.py',333),
  ('atom -> id','atom',1,'p_atom_id','my_parser.py',337),
  ('atom -> new type','atom',2,'p_atom_new','my_parser.py',341),
  ('atom -> true','atom',1,'p_atom_boolean','my_parser.py',345),
  ('atom -> false','atom',1,'p_atom_boolean','my_parser.py',346),
  ('atom -> string','atom',1,'p_atom_string','my_parser.py',350),
  ('func_call -> id opar args cpar','func_call',4,'p_func_call','my_parser.py',355),
  ('func_call -> id opar error cpar','func_call',4,'p_func_call_error','my_parser.py',359),
  ('func_call -> error opar args cpar','func_call',4,'p_func_call_error','my_parser.py',360),
  ('args -> arg_list','args',1,'p_args','my_parser.py',364),
  ('args -> arg_list_empty','args',1,'p_args','my_parser.py',365),
  ('arg_list -> expr','arg_list',1,'p_arg_list','my_parser.py',370),
  ('arg_list -> expr comma arg_list','arg_list',3,'p_arg_list','my_parser.py',371),
  ('arg_list -> error arg_list','arg_list',2,'p_arg_list_error','my_parser.py',378),
  ('arg_list_empty -> epsilon','arg_list_empty',1,'p_arg_list_empty','my_parser.py',382),
]
